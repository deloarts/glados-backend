"""new-user-levels

Revision ID: 0c1f5dc9386c
Revises: bcb5660f3d54
Create Date: 2023-11-01 10:45:44.906678

"""
import logging

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "0c1f5dc9386c"
down_revision = "bcb5660f3d54"
branch_labels = None
depends_on = None

systemuser_id = 1
log = logging.getLogger("alembic.runtime.migration")


def upgrade() -> None:
    # Schema migration: add all the new columns.
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.add_column(sa.Column("is_adminuser", sa.Boolean(), server_default=sa.text("0"), nullable=False))
        batch_op.add_column(sa.Column("is_guestuser", sa.Boolean(), server_default=sa.text("0"), nullable=False))

    # Data migration: Set the system user's permission levels
    t_users = sa.Table(
        "user",
        sa.MetaData(),
        sa.Column("id", sa.Integer()),
        sa.Column("is_adminuser", sa.Boolean()),
        sa.Column("is_guestuser", sa.Boolean()),
    )
    connection = op.get_bind()
    result = connection.execute(sa.select(t_users.c.id, t_users.c.id == systemuser_id)).first()  # type: ignore
    if result is not None:
        # Only migrate the system user if it exists. Note: Doesn't exists on first init.
        connection.execute(
            t_users.update().where(t_users.c.id == systemuser_id).values(is_adminuser=True, is_guestuser=False)
        )
        log.info("Elevated systemuser permissions.")
    else:
        log.warning("Skipping elevation of systemuser permissions. If this is at db-init, this is ok.")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_column("is_guestuser")
        batch_op.drop_column("is_adminuser")

    # ### end Alembic commands ###
